# -*- coding: utf-8 -*-
"""KMean_Clustering_Tutorial1.ipynb

Automatically generated by Colaboratory.

"""

from google.colab import files
uploaded = files.upload()

# Commented out IPython magic to ensure Python compatibility.
# Step 1: Import the libraries
# %matplotlib inline
# Provided you are running IPython, the %matplotlib inline will make your plot outputs appear and be stored within the notebook.

import pandas as pd #numerical analysis, for manipulating numerical tables and time series
import numpy as np #adding support for large, multi-dimensional arrays and matrices, along with a large collection of high-level mathematical functions

import seaborn as sns #Seaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.
import matplotlib.pyplot as plt #plotting engine

# %config InlineBackend.figure_format = 'retina' #make your chart/graph looks sharper
sns.set() #start seaborn engine

# Step 2: Load the data
df = pd.read_csv("Customer_Spending_Dataset.txt")

# Step 3: Explore the data
df.head()

df.describe()

df.info()

# Step 4: Exploratory Data Analysia and Data Wrangling
from sklearn import preprocessing

obj_df = df.select_dtypes(include=['object']).copy() #these are the categorical columns which we want to createa dummy variable
print(obj_df.head())

lb_make = preprocessing.LabelEncoder()
for col in obj_df.columns.values:
	df[f"{col}_new"] = lb_make.fit_transform(df[f"{col}"])

df.head()

df.drop(['Gender'], 1, inplace=True)

df.head()

plt.figure(figsize=(12,8))
s = sns.scatterplot(x="Age", y="SpendingScore", data=df, s=200, palette="Set2")

plt.figure(figsize=(12,8))
s = sns.scatterplot(x="Gender_new", y="SpendingScore", data=df, s=200, palette="Set2")

plt.figure(figsize=(12,8))
s = sns.scatterplot(x="AnnualIncome", y="SpendingScore", data=df, s=200, palette="Set2")

plt.figure(figsize=(12,8))
s = sns.scatterplot(x="Age", y="AnnualIncome", data=df, s=200, palette="Set2")

df_new = df.drop(columns=["Gender_new", "CustomerID"])

df_new

# Elbow method
from sklearn.cluster import KMeans
distortions = []
K = range(1,20)
for k in K:
    kmeanModel = KMeans(n_clusters=k)
    kmeanModel.fit(df_new)
    distortions.append(kmeanModel.inertia_)

#inertia here is referring to total sum of squares (or inertia) I of a cluster

plt.figure(figsize=(16,8))
plt.plot(K, distortions, 'bx-')
plt.xlabel('k')
plt.ylabel('Distortion')
plt.title('The Elbow Method showing the optimal k')
plt.show()

k = 5
X = ['Age', 'AnnualIncome', 'SpendingScore']
kmeans = KMeans(n_clusters=k).fit(df[X])
centroids = kmeans.cluster_centers_
df['label'] = kmeans.labels_.astype(str)

df.head()

plt.figure(figsize=(12,8))
s = sns.scatterplot(x="AnnualIncome", y="SpendingScore", hue='label', data=df, s=200, palette="Set2")

plt.figure(figsize=(12,8))
s = sns.scatterplot(x="Age", y="SpendingScore", hue='label', data=df, s=200, palette="Set2")

